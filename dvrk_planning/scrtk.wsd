@startuml

node OutputModality{
    component PSM #YellowGreen
    component PSMAMBFSimulation #YellowGreen
    component PSMUnitySimulation #YellowGreen
    component Raven #YellowGreen
    component UR5 #YellowGreen
    component Any as "Any Collaborative Robot" #YellowGreen
}

interface servo_jp
interface measured_js
servo_jp )-- OutputModality
measured_js -- OutputModality

node WorkcellDescription{
    component Kinematics as "Robot Kinematics and Joint Limits"
    component URDF
    component VirtualScene as "Virtual Scene, virtual fixtures"
    VirtualScene *-- URDF
}

' component ControllerManager
node ControllerManager{
    node CollaborativeController{
        component TeleopController
        component HapticController
        component CartesianController
        component ConstrainedOptimization
        TeleopController *-- ConstrainedOptimization
        HapticController *-- ConstrainedOptimization
        CartesianController *-- ConstrainedOptimization
    }

    node MotionPlanningController {
        component PathPlanner
        component TrajecoryGenerator as "TrajecoryGenerator: velocity/acc optimizer/profile"
        component TrajectoryStreamer
        component CollisionChecking
        PathPlanner *-- CollisionChecking
        PathPlanner --> TrajecoryGenerator
        TrajecoryGenerator --> TrajectoryStreamer
    }
}
interface enable_disable_controller
interface servo_cr
interface measured_cp
interface servo_cp_follow as "servo_cp (follower)"
interface effort_cr
interface update_scene
interface move_cp as "move_cp ie. Cartesian interpolation or Joint path planning, depends on config"

enable_disable_controller -- ControllerManager

update_scene ~~~ VirtualScene

CollaborativeController *-- Kinematics
MotionPlanningController *-- Kinematics
ConstrainedOptimization *-- VirtualScene
CollisionChecking *-- VirtualScene

measured_cp -- CartesianController
servo_cr )-- CartesianController
servo_cp_follow )-- TeleopController
effort_cr -- HapticController
move_cp ~~ PathPlanner

TeleopController -- servo_jp
TeleopController --( measured_js
CartesianController -- servo_jp
CartesianController --( measured_js
HapticController --( measured_js
TrajectoryStreamer -- servo_jp

node InputDevice{
    component MTM #YellowGreen
    component Keyboard #YellowGreen
    component Geomagic #YellowGreen
    component Occulus #YellowGreen
    component OtherDevices #YellowGreen
}

component AutonomousApplication
AutonomousApplication --- servo_cp_follow
AutonomousApplication --- servo_cr
AutonomousApplication ---( measured_cp
AutonomousApplication ---( enable_disable_controller
InputDevice --- servo_cp_follow
InputDevice --- servo_cr
InputDevice ---( effort_cr

AutonomousApplication ~~( update_scene
AutonomousApplication ~~( move_cp

component GeneratorWebGUI
GeneratorWebGUI --> URDF
GeneratorWebGUI --> Kinematics

component Visualization  as "Visualization: RViz"
interface MarkerArray
Visualization --( MarkerArray
Visualization --( measured_js
MarkerArray -- VirtualScene

component Camera as "Camera or Processed Vision Information (Can be from Physics Simulation)" #YellowGreen
AutonomousApplication <-right- Camera

component GUI
GUI -- AutonomousApplication

PSMAMBFSimulation *-- URDF
PSMUnitySimulation *-- URDF

@enduml