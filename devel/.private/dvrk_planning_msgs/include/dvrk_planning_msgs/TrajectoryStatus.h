// Generated by gencpp from file dvrk_planning_msgs/TrajectoryStatus.msg
// DO NOT EDIT!


#ifndef DVRK_PLANNING_MSGS_MESSAGE_TRAJECTORYSTATUS_H
#define DVRK_PLANNING_MSGS_MESSAGE_TRAJECTORYSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace dvrk_planning_msgs
{
template <class ContainerAllocator>
struct TrajectoryStatus_
{
  typedef TrajectoryStatus_<ContainerAllocator> Type;

  TrajectoryStatus_()
    : header()
    , trajectory_name()
    , percentage_completed(0.0)
    , completed_trajectory_points(0)
    , total_trajectory_points(0)  {
    }
  TrajectoryStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , trajectory_name(_alloc)
    , percentage_completed(0.0)
    , completed_trajectory_points(0)
    , total_trajectory_points(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _trajectory_name_type;
  _trajectory_name_type trajectory_name;

   typedef float _percentage_completed_type;
  _percentage_completed_type percentage_completed;

   typedef int64_t _completed_trajectory_points_type;
  _completed_trajectory_points_type completed_trajectory_points;

   typedef int64_t _total_trajectory_points_type;
  _total_trajectory_points_type total_trajectory_points;





  typedef boost::shared_ptr< ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryStatus_

typedef ::dvrk_planning_msgs::TrajectoryStatus_<std::allocator<void> > TrajectoryStatus;

typedef boost::shared_ptr< ::dvrk_planning_msgs::TrajectoryStatus > TrajectoryStatusPtr;
typedef boost::shared_ptr< ::dvrk_planning_msgs::TrajectoryStatus const> TrajectoryStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator1> & lhs, const ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.trajectory_name == rhs.trajectory_name &&
    lhs.percentage_completed == rhs.percentage_completed &&
    lhs.completed_trajectory_points == rhs.completed_trajectory_points &&
    lhs.total_trajectory_points == rhs.total_trajectory_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator1> & lhs, const ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dvrk_planning_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4e78f278b5ab5a1f55612d6d6c10761";
  }

  static const char* value(const ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4e78f278b5ab5a1ULL;
  static const uint64_t static_value2 = 0xf55612d6d6c10761ULL;
};

template<class ContainerAllocator>
struct DataType< ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dvrk_planning_msgs/TrajectoryStatus";
  }

  static const char* value(const ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"string trajectory_name\n"
"float32 percentage_completed\n"
"int64 completed_trajectory_points\n"
"int64 total_trajectory_points\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.trajectory_name);
      stream.next(m.percentage_completed);
      stream.next(m.completed_trajectory_points);
      stream.next(m.total_trajectory_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dvrk_planning_msgs::TrajectoryStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "trajectory_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.trajectory_name);
    s << indent << "percentage_completed: ";
    Printer<float>::stream(s, indent + "  ", v.percentage_completed);
    s << indent << "completed_trajectory_points: ";
    Printer<int64_t>::stream(s, indent + "  ", v.completed_trajectory_points);
    s << indent << "total_trajectory_points: ";
    Printer<int64_t>::stream(s, indent + "  ", v.total_trajectory_points);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DVRK_PLANNING_MSGS_MESSAGE_TRAJECTORYSTATUS_H
